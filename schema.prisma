// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider   = "prisma-client-js"
  output     = "node_modules/.prisma/client"
  engineType = "binary"
}

model User {
  id                      String       @id @default(cuid())
  name                    String       @default("")
  email                   String       @unique @default("")
  password                String?
  entry                   Entry[]      @relation("Entry_user")
  prediction              Prediction[] @relation("Prediction_user")
  role                    Role?        @relation("User_role", fields: [roleId], references: [id])
  roleId                  String?      @map("role")
  passwordResetToken      String?
  passwordResetIssuedAt   DateTime?
  passwordResetRedeemedAt DateTime?

  @@index([roleId])
}

model Role {
  id                   String  @id @default(cuid())
  name                 String  @default("")
  canSeeOtherUsers     Boolean @default(false)
  canManageUsers       Boolean @default(false)
  canManageRoles       Boolean @default(false)
  canManageTournaments Boolean @default(false)
  canManagePredictions Boolean @default(false)
  canManageEntries     Boolean @default(false)
  assignedTo           User[]  @relation("User_role")
}

model Entry {
  id           String       @id @default(cuid())
  user         User?        @relation("Entry_user", fields: [userId], references: [id])
  userId       String?      @map("user")
  name         String       @unique @default("")
  prediction   Prediction[] @relation("Prediction_entry")
  tournament   Tournament?  @relation("Entry_tournament", fields: [tournamentId], references: [id])
  tournamentId String?      @map("tournament")

  @@index([userId])
  @@index([tournamentId])
}

model Prediction {
  id               String      @id @default(cuid())
  user             User?       @relation("Prediction_user", fields: [userId], references: [id])
  userId           String?     @map("user")
  matchSet         MatchSet?   @relation("Prediction_matchSet", fields: [matchSetId], references: [id])
  matchSetId       String?     @map("matchSet")
  predictedMatch   Match?      @relation("Prediction_predictedMatch", fields: [predictedMatchId], references: [id])
  predictedMatchId String?     @map("predictedMatch")
  predictedTeam    Team?       @relation("Prediction_predictedTeam", fields: [predictedTeamId], references: [id])
  predictedTeamId  String?     @map("predictedTeam")
  tournament       Tournament? @relation("Prediction_tournament", fields: [tournamentId], references: [id])
  tournamentId     String?     @map("tournament")
  entry            Entry?      @relation("Prediction_entry", fields: [entryId], references: [id])
  entryId          String?     @map("entry")

  @@index([userId])
  @@index([matchSetId])
  @@index([predictedMatchId])
  @@index([predictedTeamId])
  @@index([tournamentId])
  @@index([entryId])
}

model Tournament {
  id          String       @id @default(cuid())
  name        String       @default("")
  match       Match[]      @relation("Match_tournament")
  matchSet    MatchSet[]   @relation("MatchSet_tournament")
  entry       Entry[]      @relation("Entry_tournament")
  prediction  Prediction[] @relation("Prediction_tournament")
  slug        String       @unique @default("")
  maxTeamUses Int?
  maxEntries  Int?
}

model Match {
  id                     String       @id @default(cuid())
  tournament             Tournament?  @relation("Match_tournament", fields: [tournamentId], references: [id])
  tournamentId           String?      @map("tournament")
  blue                   Team?        @relation("Match_blue", fields: [blueId], references: [id])
  blueId                 String?      @map("blue")
  red                    Team?        @relation("Match_red", fields: [redId], references: [id])
  redId                  String?      @map("red")
  bluePredictionsInMatch Int?         @default(0)
  redPredictionsInMatch  Int?         @default(0)
  matchSet               MatchSet?    @relation("Match_matchSet", fields: [matchSetId], references: [id])
  matchSetId             String?      @map("matchSet")
  winner                 Team?        @relation("Match_winner", fields: [winnerId], references: [id])
  winnerId               String?      @map("winner")
  prediction             Prediction[] @relation("Prediction_predictedMatch")

  @@index([tournamentId])
  @@index([blueId])
  @@index([redId])
  @@index([matchSetId])
  @@index([winnerId])
}

model MatchSet {
  id           String       @id @default(cuid())
  lockInTime   DateTime?
  match        Match[]      @relation("Match_matchSet")
  tournament   Tournament?  @relation("MatchSet_tournament", fields: [tournamentId], references: [id])
  tournamentId String?      @map("tournament")
  predictions  Prediction[] @relation("Prediction_matchSet")

  @@index([tournamentId])
}

model Team {
  id                String       @id @default(cuid())
  name              String       @default("")
  photo             TeamImage?   @relation("Team_photo", fields: [photoId], references: [id])
  photoId           String?      @unique @map("photo")
  prediction        Prediction[] @relation("Prediction_predictedTeam")
  from_Match_blue   Match[]      @relation("Match_blue")
  from_Match_red    Match[]      @relation("Match_red")
  from_Match_winner Match[]      @relation("Match_winner")
}

model TeamImage {
  id      String @id @default(cuid())
  image   Json?
  altText String @default("")
  team    Team?  @relation("Team_photo")
}