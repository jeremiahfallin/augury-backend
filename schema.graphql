# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

input PredictionInput {
  teamId: ID!
  matchId: ID!
}

type Mutation {
  enterPredictions(entryId: ID!, predictions: [PredictionInput]): Entry
  sendUserPasswordResetLink(email: String!): Boolean!
  redeemUserPasswordResetToken(
    email: String!
    token: String!
    password: String!
  ): RedeemUserPasswordResetTokenResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult!
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createRole(data: RoleCreateInput!): Role
  createRoles(data: [RoleCreateInput!]!): [Role]
  updateRole(where: RoleWhereUniqueInput!, data: RoleUpdateInput!): Role
  updateRoles(data: [RoleUpdateArgs!]!): [Role]
  deleteRole(where: RoleWhereUniqueInput!): Role
  deleteRoles(where: [RoleWhereUniqueInput!]!): [Role]
  createEntry(data: EntryCreateInput!): Entry
  createEntries(data: [EntryCreateInput!]!): [Entry]
  updateEntry(where: EntryWhereUniqueInput!, data: EntryUpdateInput!): Entry
  updateEntries(data: [EntryUpdateArgs!]!): [Entry]
  deleteEntry(where: EntryWhereUniqueInput!): Entry
  deleteEntries(where: [EntryWhereUniqueInput!]!): [Entry]
  createPrediction(data: PredictionCreateInput!): Prediction
  createPredictions(data: [PredictionCreateInput!]!): [Prediction]
  updatePrediction(
    where: PredictionWhereUniqueInput!
    data: PredictionUpdateInput!
  ): Prediction
  updatePredictions(data: [PredictionUpdateArgs!]!): [Prediction]
  deletePrediction(where: PredictionWhereUniqueInput!): Prediction
  deletePredictions(where: [PredictionWhereUniqueInput!]!): [Prediction]
  createTournament(data: TournamentCreateInput!): Tournament
  createTournaments(data: [TournamentCreateInput!]!): [Tournament]
  updateTournament(
    where: TournamentWhereUniqueInput!
    data: TournamentUpdateInput!
  ): Tournament
  updateTournaments(data: [TournamentUpdateArgs!]!): [Tournament]
  deleteTournament(where: TournamentWhereUniqueInput!): Tournament
  deleteTournaments(where: [TournamentWhereUniqueInput!]!): [Tournament]
  createMatch(data: MatchCreateInput!): Match
  createMatches(data: [MatchCreateInput!]!): [Match]
  updateMatch(where: MatchWhereUniqueInput!, data: MatchUpdateInput!): Match
  updateMatches(data: [MatchUpdateArgs!]!): [Match]
  deleteMatch(where: MatchWhereUniqueInput!): Match
  deleteMatches(where: [MatchWhereUniqueInput!]!): [Match]
  createMatchSet(data: MatchSetCreateInput!): MatchSet
  createMatchSets(data: [MatchSetCreateInput!]!): [MatchSet]
  updateMatchSet(
    where: MatchSetWhereUniqueInput!
    data: MatchSetUpdateInput!
  ): MatchSet
  updateMatchSets(data: [MatchSetUpdateArgs!]!): [MatchSet]
  deleteMatchSet(where: MatchSetWhereUniqueInput!): MatchSet
  deleteMatchSets(where: [MatchSetWhereUniqueInput!]!): [MatchSet]
  createTeam(data: TeamCreateInput!): Team
  createTeams(data: [TeamCreateInput!]!): [Team]
  updateTeam(where: TeamWhereUniqueInput!, data: TeamUpdateInput!): Team
  updateTeams(data: [TeamUpdateArgs!]!): [Team]
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteTeams(where: [TeamWhereUniqueInput!]!): [Team]
  createTeamImage(data: TeamImageCreateInput!): TeamImage
  createTeamImages(data: [TeamImageCreateInput!]!): [TeamImage]
  updateTeamImage(
    where: TeamImageWhereUniqueInput!
    data: TeamImageUpdateInput!
  ): TeamImage
  updateTeamImages(data: [TeamImageUpdateArgs!]!): [TeamImage]
  deleteTeamImage(where: TeamImageWhereUniqueInput!): TeamImage
  deleteTeamImages(where: [TeamImageWhereUniqueInput!]!): [TeamImage]
  endSession: Boolean!
}

type ValidateUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

type RedeemUserPasswordResetTokenResult {
  code: PasswordResetRedemptionErrorCode!
  message: String!
}

enum PasswordResetRedemptionErrorCode {
  FAILURE
  TOKEN_EXPIRED
  TOKEN_REDEEMED
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

union AuthenticatedItem = User

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  entry(
    where: EntryWhereInput! = {}
    orderBy: [EntryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Entry!]
  entryCount(where: EntryWhereInput! = {}): Int
  prediction(
    where: PredictionWhereInput! = {}
    orderBy: [PredictionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prediction!]
  predictionCount(where: PredictionWhereInput! = {}): Int
  role: Role
  passwordResetToken: PasswordState
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
  entry: EntryManyRelationFilter
  prediction: PredictionManyRelationFilter
  role: RoleWhereInput
  passwordResetToken: PasswordFilter
  passwordResetIssuedAt: DateTimeNullableFilter
  passwordResetRedeemedAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input EntryManyRelationFilter {
  every: EntryWhereInput
  some: EntryWhereInput
  none: EntryWhereInput
}

input PredictionManyRelationFilter {
  every: PredictionWhereInput
  some: PredictionWhereInput
  none: PredictionWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  passwordResetIssuedAt: OrderDirection
  passwordResetRedeemedAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  entry: EntryRelateToManyForUpdateInput
  prediction: PredictionRelateToManyForUpdateInput
  role: RoleRelateToOneForUpdateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input EntryRelateToManyForUpdateInput {
  disconnect: [EntryWhereUniqueInput!]
  set: [EntryWhereUniqueInput!]
  create: [EntryCreateInput!]
  connect: [EntryWhereUniqueInput!]
}

input PredictionRelateToManyForUpdateInput {
  disconnect: [PredictionWhereUniqueInput!]
  set: [PredictionWhereUniqueInput!]
  create: [PredictionCreateInput!]
  connect: [PredictionWhereUniqueInput!]
}

input RoleRelateToOneForUpdateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
  disconnect: Boolean
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  entry: EntryRelateToManyForCreateInput
  prediction: PredictionRelateToManyForCreateInput
  role: RoleRelateToOneForCreateInput
  passwordResetToken: String
  passwordResetIssuedAt: DateTime
  passwordResetRedeemedAt: DateTime
}

input EntryRelateToManyForCreateInput {
  create: [EntryCreateInput!]
  connect: [EntryWhereUniqueInput!]
}

input PredictionRelateToManyForCreateInput {
  create: [PredictionCreateInput!]
  connect: [PredictionWhereUniqueInput!]
}

input RoleRelateToOneForCreateInput {
  create: RoleCreateInput
  connect: RoleWhereUniqueInput
}

type Role {
  id: ID!
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageTournaments: Boolean
  canManagePredictions: Boolean
  canManageEntries: Boolean
  assignedTo(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  assignedToCount(where: UserWhereInput! = {}): Int
}

input RoleWhereUniqueInput {
  id: ID
}

input RoleWhereInput {
  AND: [RoleWhereInput!]
  OR: [RoleWhereInput!]
  NOT: [RoleWhereInput!]
  id: IDFilter
  name: StringFilter
  canSeeOtherUsers: BooleanFilter
  canManageUsers: BooleanFilter
  canManageRoles: BooleanFilter
  canManageTournaments: BooleanFilter
  canManagePredictions: BooleanFilter
  canManageEntries: BooleanFilter
  assignedTo: UserManyRelationFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserManyRelationFilter {
  every: UserWhereInput
  some: UserWhereInput
  none: UserWhereInput
}

input RoleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  canSeeOtherUsers: OrderDirection
  canManageUsers: OrderDirection
  canManageRoles: OrderDirection
  canManageTournaments: OrderDirection
  canManagePredictions: OrderDirection
  canManageEntries: OrderDirection
}

input RoleUpdateInput {
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageTournaments: Boolean
  canManagePredictions: Boolean
  canManageEntries: Boolean
  assignedTo: UserRelateToManyForUpdateInput
}

input UserRelateToManyForUpdateInput {
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input RoleUpdateArgs {
  where: RoleWhereUniqueInput!
  data: RoleUpdateInput!
}

input RoleCreateInput {
  name: String
  canSeeOtherUsers: Boolean
  canManageUsers: Boolean
  canManageRoles: Boolean
  canManageTournaments: Boolean
  canManagePredictions: Boolean
  canManageEntries: Boolean
  assignedTo: UserRelateToManyForCreateInput
}

input UserRelateToManyForCreateInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

type Entry {
  id: ID!
  user: User
  name: String
  prediction(
    where: PredictionWhereInput! = {}
    orderBy: [PredictionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prediction!]
  predictionCount(where: PredictionWhereInput! = {}): Int
  tournament: Tournament
  active: Boolean
}

input EntryWhereUniqueInput {
  id: ID
  name: String
}

input EntryWhereInput {
  AND: [EntryWhereInput!]
  OR: [EntryWhereInput!]
  NOT: [EntryWhereInput!]
  id: IDFilter
  user: UserWhereInput
  name: StringFilter
  prediction: PredictionManyRelationFilter
  tournament: TournamentWhereInput
}

input EntryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input EntryUpdateInput {
  user: UserRelateToOneForUpdateInput
  name: String
  prediction: PredictionRelateToManyForUpdateInput
  tournament: TournamentRelateToOneForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TournamentRelateToOneForUpdateInput {
  create: TournamentCreateInput
  connect: TournamentWhereUniqueInput
  disconnect: Boolean
}

input EntryUpdateArgs {
  where: EntryWhereUniqueInput!
  data: EntryUpdateInput!
}

input EntryCreateInput {
  user: UserRelateToOneForCreateInput
  name: String
  prediction: PredictionRelateToManyForCreateInput
  tournament: TournamentRelateToOneForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TournamentRelateToOneForCreateInput {
  create: TournamentCreateInput
  connect: TournamentWhereUniqueInput
}

type Prediction {
  id: ID!
  user: User
  matchSet: MatchSet
  predictedMatch: Match
  predictedTeam: Team
  tournament: Tournament
  entry: Entry
}

input PredictionWhereUniqueInput {
  id: ID
}

input PredictionWhereInput {
  AND: [PredictionWhereInput!]
  OR: [PredictionWhereInput!]
  NOT: [PredictionWhereInput!]
  id: IDFilter
  user: UserWhereInput
  matchSet: MatchSetWhereInput
  predictedMatch: MatchWhereInput
  predictedTeam: TeamWhereInput
  tournament: TournamentWhereInput
  entry: EntryWhereInput
}

input PredictionOrderByInput {
  id: OrderDirection
}

input PredictionUpdateInput {
  user: UserRelateToOneForUpdateInput
  matchSet: MatchSetRelateToOneForUpdateInput
  predictedMatch: MatchRelateToOneForUpdateInput
  predictedTeam: TeamRelateToOneForUpdateInput
  tournament: TournamentRelateToOneForUpdateInput
  entry: EntryRelateToOneForUpdateInput
}

input MatchSetRelateToOneForUpdateInput {
  create: MatchSetCreateInput
  connect: MatchSetWhereUniqueInput
  disconnect: Boolean
}

input MatchRelateToOneForUpdateInput {
  create: MatchCreateInput
  connect: MatchWhereUniqueInput
  disconnect: Boolean
}

input TeamRelateToOneForUpdateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
  disconnect: Boolean
}

input EntryRelateToOneForUpdateInput {
  create: EntryCreateInput
  connect: EntryWhereUniqueInput
  disconnect: Boolean
}

input PredictionUpdateArgs {
  where: PredictionWhereUniqueInput!
  data: PredictionUpdateInput!
}

input PredictionCreateInput {
  user: UserRelateToOneForCreateInput
  matchSet: MatchSetRelateToOneForCreateInput
  predictedMatch: MatchRelateToOneForCreateInput
  predictedTeam: TeamRelateToOneForCreateInput
  tournament: TournamentRelateToOneForCreateInput
  entry: EntryRelateToOneForCreateInput
}

input MatchSetRelateToOneForCreateInput {
  create: MatchSetCreateInput
  connect: MatchSetWhereUniqueInput
}

input MatchRelateToOneForCreateInput {
  create: MatchCreateInput
  connect: MatchWhereUniqueInput
}

input TeamRelateToOneForCreateInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input EntryRelateToOneForCreateInput {
  create: EntryCreateInput
  connect: EntryWhereUniqueInput
}

type Tournament {
  id: ID!
  name: String
  match(
    where: MatchWhereInput! = {}
    orderBy: [MatchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Match!]
  matchCount(where: MatchWhereInput! = {}): Int
  matchSet(
    where: MatchSetWhereInput! = {}
    orderBy: [MatchSetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MatchSet!]
  matchSetCount(where: MatchSetWhereInput! = {}): Int
  entry(
    where: EntryWhereInput! = {}
    orderBy: [EntryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Entry!]
  entryCount(where: EntryWhereInput! = {}): Int
  prediction(
    where: PredictionWhereInput! = {}
    orderBy: [PredictionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prediction!]
  predictionCount(where: PredictionWhereInput! = {}): Int
  slug: String
  maxTeamUses: Int
  maxEntries: Int
}

input TournamentWhereUniqueInput {
  id: ID
  slug: String
}

input TournamentWhereInput {
  AND: [TournamentWhereInput!]
  OR: [TournamentWhereInput!]
  NOT: [TournamentWhereInput!]
  id: IDFilter
  name: StringFilter
  match: MatchManyRelationFilter
  matchSet: MatchSetManyRelationFilter
  entry: EntryManyRelationFilter
  prediction: PredictionManyRelationFilter
  slug: StringFilter
  maxTeamUses: IntNullableFilter
  maxEntries: IntNullableFilter
}

input MatchManyRelationFilter {
  every: MatchWhereInput
  some: MatchWhereInput
  none: MatchWhereInput
}

input MatchSetManyRelationFilter {
  every: MatchSetWhereInput
  some: MatchSetWhereInput
  none: MatchSetWhereInput
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input TournamentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  slug: OrderDirection
  maxTeamUses: OrderDirection
  maxEntries: OrderDirection
}

input TournamentUpdateInput {
  name: String
  match: MatchRelateToManyForUpdateInput
  matchSet: MatchSetRelateToManyForUpdateInput
  entry: EntryRelateToManyForUpdateInput
  prediction: PredictionRelateToManyForUpdateInput
  slug: String
  maxTeamUses: Int
  maxEntries: Int
}

input MatchRelateToManyForUpdateInput {
  disconnect: [MatchWhereUniqueInput!]
  set: [MatchWhereUniqueInput!]
  create: [MatchCreateInput!]
  connect: [MatchWhereUniqueInput!]
}

input MatchSetRelateToManyForUpdateInput {
  disconnect: [MatchSetWhereUniqueInput!]
  set: [MatchSetWhereUniqueInput!]
  create: [MatchSetCreateInput!]
  connect: [MatchSetWhereUniqueInput!]
}

input TournamentUpdateArgs {
  where: TournamentWhereUniqueInput!
  data: TournamentUpdateInput!
}

input TournamentCreateInput {
  name: String
  match: MatchRelateToManyForCreateInput
  matchSet: MatchSetRelateToManyForCreateInput
  entry: EntryRelateToManyForCreateInput
  prediction: PredictionRelateToManyForCreateInput
  slug: String
  maxTeamUses: Int
  maxEntries: Int
}

input MatchRelateToManyForCreateInput {
  create: [MatchCreateInput!]
  connect: [MatchWhereUniqueInput!]
}

input MatchSetRelateToManyForCreateInput {
  create: [MatchSetCreateInput!]
  connect: [MatchSetWhereUniqueInput!]
}

type Match {
  id: ID!
  tournament: Tournament
  blue: Team
  red: Team
  bluePredictionsInMatch: Int
  redPredictionsInMatch: Int
  matchSet: MatchSet
  winner: Team
  prediction(
    where: PredictionWhereInput! = {}
    orderBy: [PredictionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prediction!]
  predictionCount(where: PredictionWhereInput! = {}): Int
}

input MatchWhereUniqueInput {
  id: ID
}

input MatchWhereInput {
  AND: [MatchWhereInput!]
  OR: [MatchWhereInput!]
  NOT: [MatchWhereInput!]
  id: IDFilter
  tournament: TournamentWhereInput
  blue: TeamWhereInput
  red: TeamWhereInput
  bluePredictionsInMatch: IntNullableFilter
  redPredictionsInMatch: IntNullableFilter
  matchSet: MatchSetWhereInput
  winner: TeamWhereInput
  prediction: PredictionManyRelationFilter
}

input MatchOrderByInput {
  id: OrderDirection
  bluePredictionsInMatch: OrderDirection
  redPredictionsInMatch: OrderDirection
}

input MatchUpdateInput {
  tournament: TournamentRelateToOneForUpdateInput
  blue: TeamRelateToOneForUpdateInput
  red: TeamRelateToOneForUpdateInput
  bluePredictionsInMatch: Int
  redPredictionsInMatch: Int
  matchSet: MatchSetRelateToOneForUpdateInput
  winner: TeamRelateToOneForUpdateInput
  prediction: PredictionRelateToManyForUpdateInput
}

input MatchUpdateArgs {
  where: MatchWhereUniqueInput!
  data: MatchUpdateInput!
}

input MatchCreateInput {
  tournament: TournamentRelateToOneForCreateInput
  blue: TeamRelateToOneForCreateInput
  red: TeamRelateToOneForCreateInput
  bluePredictionsInMatch: Int
  redPredictionsInMatch: Int
  matchSet: MatchSetRelateToOneForCreateInput
  winner: TeamRelateToOneForCreateInput
  prediction: PredictionRelateToManyForCreateInput
}

type MatchSet {
  id: ID!
  lockInTime: DateTime
  match(
    where: MatchWhereInput! = {}
    orderBy: [MatchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Match!]
  matchCount(where: MatchWhereInput! = {}): Int
  tournament: Tournament
  predictions(
    where: PredictionWhereInput! = {}
    orderBy: [PredictionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prediction!]
  predictionsCount(where: PredictionWhereInput! = {}): Int
}

input MatchSetWhereUniqueInput {
  id: ID
}

input MatchSetWhereInput {
  AND: [MatchSetWhereInput!]
  OR: [MatchSetWhereInput!]
  NOT: [MatchSetWhereInput!]
  id: IDFilter
  lockInTime: DateTimeNullableFilter
  match: MatchManyRelationFilter
  tournament: TournamentWhereInput
  predictions: PredictionManyRelationFilter
}

input MatchSetOrderByInput {
  id: OrderDirection
  lockInTime: OrderDirection
}

input MatchSetUpdateInput {
  lockInTime: DateTime
  match: MatchRelateToManyForUpdateInput
  tournament: TournamentRelateToOneForUpdateInput
  predictions: PredictionRelateToManyForUpdateInput
}

input MatchSetUpdateArgs {
  where: MatchSetWhereUniqueInput!
  data: MatchSetUpdateInput!
}

input MatchSetCreateInput {
  lockInTime: DateTime
  match: MatchRelateToManyForCreateInput
  tournament: TournamentRelateToOneForCreateInput
  predictions: PredictionRelateToManyForCreateInput
}

type Team {
  id: ID!
  name: String
  photo: TeamImage
  prediction(
    where: PredictionWhereInput! = {}
    orderBy: [PredictionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prediction!]
  predictionCount(where: PredictionWhereInput! = {}): Int
}

input TeamWhereUniqueInput {
  id: ID
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
  id: IDFilter
  name: StringFilter
  photo: TeamImageWhereInput
  prediction: PredictionManyRelationFilter
}

input TeamOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TeamUpdateInput {
  name: String
  photo: TeamImageRelateToOneForUpdateInput
  prediction: PredictionRelateToManyForUpdateInput
}

input TeamImageRelateToOneForUpdateInput {
  create: TeamImageCreateInput
  connect: TeamImageWhereUniqueInput
  disconnect: Boolean
}

input TeamUpdateArgs {
  where: TeamWhereUniqueInput!
  data: TeamUpdateInput!
}

input TeamCreateInput {
  name: String
  photo: TeamImageRelateToOneForCreateInput
  prediction: PredictionRelateToManyForCreateInput
}

input TeamImageRelateToOneForCreateInput {
  create: TeamImageCreateInput
  connect: TeamImageWhereUniqueInput
}

type TeamImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  team: Team
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input TeamImageWhereUniqueInput {
  id: ID
}

input TeamImageWhereInput {
  AND: [TeamImageWhereInput!]
  OR: [TeamImageWhereInput!]
  NOT: [TeamImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  team: TeamWhereInput
}

input TeamImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input TeamImageUpdateInput {
  image: Upload
  altText: String
  team: TeamRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input TeamImageUpdateArgs {
  where: TeamImageWhereUniqueInput!
  data: TeamImageUpdateInput!
}

input TeamImageCreateInput {
  image: Upload
  altText: String
  team: TeamRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Query {
  validateUserPasswordResetToken(
    email: String!
    token: String!
  ): ValidateUserPasswordResetTokenResult
  authenticatedItem: AuthenticatedItem
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  roles(
    where: RoleWhereInput! = {}
    orderBy: [RoleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Role!]
  role(where: RoleWhereUniqueInput!): Role
  rolesCount(where: RoleWhereInput! = {}): Int
  entries(
    where: EntryWhereInput! = {}
    orderBy: [EntryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Entry!]
  entry(where: EntryWhereUniqueInput!): Entry
  entriesCount(where: EntryWhereInput! = {}): Int
  predictions(
    where: PredictionWhereInput! = {}
    orderBy: [PredictionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Prediction!]
  prediction(where: PredictionWhereUniqueInput!): Prediction
  predictionsCount(where: PredictionWhereInput! = {}): Int
  tournaments(
    where: TournamentWhereInput! = {}
    orderBy: [TournamentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tournament!]
  tournament(where: TournamentWhereUniqueInput!): Tournament
  tournamentsCount(where: TournamentWhereInput! = {}): Int
  matches(
    where: MatchWhereInput! = {}
    orderBy: [MatchOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Match!]
  match(where: MatchWhereUniqueInput!): Match
  matchesCount(where: MatchWhereInput! = {}): Int
  matchSets(
    where: MatchSetWhereInput! = {}
    orderBy: [MatchSetOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [MatchSet!]
  matchSet(where: MatchSetWhereUniqueInput!): MatchSet
  matchSetsCount(where: MatchSetWhereInput! = {}): Int
  teams(
    where: TeamWhereInput! = {}
    orderBy: [TeamOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Team!]
  team(where: TeamWhereUniqueInput!): Team
  teamsCount(where: TeamWhereInput! = {}): Int
  teamImages(
    where: TeamImageWhereInput! = {}
    orderBy: [TeamImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [TeamImage!]
  teamImage(where: TeamImageWhereUniqueInput!): TeamImage
  teamImagesCount(where: TeamImageWhereInput! = {}): Int
  keystone: KeystoneMeta!
}

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
